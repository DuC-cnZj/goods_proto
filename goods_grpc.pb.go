// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goods_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IphoneClient is the client API for Iphone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IphoneClient interface {
	GetOneByType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type iphoneClient struct {
	cc grpc.ClientConnInterface
}

func NewIphoneClient(cc grpc.ClientConnInterface) IphoneClient {
	return &iphoneClient{cc}
}

func (c *iphoneClient) GetOneByType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/goods.Iphone/getOneByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IphoneServer is the server API for Iphone service.
// All implementations must embed UnimplementedIphoneServer
// for forward compatibility
type IphoneServer interface {
	GetOneByType(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedIphoneServer()
}

// UnimplementedIphoneServer must be embedded to have forward compatible implementations.
type UnimplementedIphoneServer struct {
}

func (UnimplementedIphoneServer) GetOneByType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneByType not implemented")
}
func (UnimplementedIphoneServer) mustEmbedUnimplementedIphoneServer() {}

// UnsafeIphoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IphoneServer will
// result in compilation errors.
type UnsafeIphoneServer interface {
	mustEmbedUnimplementedIphoneServer()
}

func RegisterIphoneServer(s grpc.ServiceRegistrar, srv IphoneServer) {
	s.RegisterService(&_Iphone_serviceDesc, srv)
}

func _Iphone_GetOneByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IphoneServer).GetOneByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.Iphone/getOneByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IphoneServer).GetOneByType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Iphone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.Iphone",
	HandlerType: (*IphoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOneByType",
			Handler:    _Iphone_GetOneByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
